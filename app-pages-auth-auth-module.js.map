{"version":3,"sources":["webpack:///./src/app/pages/auth/auth-routing.module.ts","webpack:///./src/app/pages/auth/auth.module.ts","webpack:///./src/app/pages/auth/login/login.component.html","webpack:///./src/app/pages/auth/login/login.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEP,CAAC,OAAO;AACI;AAErD,IAAM,MAAM,GAAW;IAC5B;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,6DAAe;QAC1B,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,wEAAiB,CAAC,OAAO;aACrC;SACF;KACF;CACF,CAAC;AAKF;IAAA;IAAmC,CAAC;IAAvB,oBAAoB;QAJhC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,oBAAoB,CAAG;IAAD,2BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACtBc;AACN;AACI;AACE;AAEc;AAChB;AAMrB;AAEoC,CAAC,OAAO;AAgBpE;IAAA;IAA4B,CAAC;IAAhB,aAAa;QAdzB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,4DAAY;gBACZ,4DAAa;gBACb,4DAAa;gBACb,6DAAc;gBACd,+DAAgB;gBAChB,yEAAoB;gBACpB,0DAAY;aACb;YACD,YAAY,EAAE,CAAC,wEAAiB,CAAC;SAClC,CAAC;OACW,aAAa,CAAG;IAAD,oBAAC;CAAA;AAAH;;;;;;;;;;;;AC9B1B,yYAAyY,SAAS,sTAAsT,WAAW,o+DAAo+D,yDAAyD,iBAAiB,yDAAyD,gb;;;;;;;;;;;;;;;;;;ACAhxF;AACO;AAMjD;IAAuC,2EAAgB;IAAvD;;IAAyD,CAAC;IAA7C,iBAAiB;QAJ7B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,8GAAqC;SACtC,CAAC;OACW,iBAAiB,CAA4B;IAAD,wBAAC;CAAA,CAAnB,8DAAgB,GAAG;AAA5B","file":"app-pages-auth-auth-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { NbAuthComponent } from \"@nebular/auth\"; // <---\r\nimport { NgxLoginComponent } from \"./login/login.component\";\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: NbAuthComponent,\r\n    children: [\r\n      {\r\n        path: \"login\",\r\n        component: NgxLoginComponent // <---\r\n      }\r\n    ]\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class NgxAuthRoutingModule {}\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\nimport { NgxAuthRoutingModule } from \"./auth-routing.module\";\r\nimport { NbAuthModule } from \"@nebular/auth\";\r\nimport {\r\n  NbAlertModule,\r\n  NbButtonModule,\r\n  NbCheckboxModule,\r\n  NbInputModule\r\n} from \"@nebular/theme\";\r\n\r\nimport { NgxLoginComponent } from \"./login/login.component\"; // <---\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    NbAlertModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbCheckboxModule,\r\n    NgxAuthRoutingModule,\r\n    NbAuthModule\r\n  ],\r\n  declarations: [NgxLoginComponent]\r\n})\r\nexport class NgxAuthModule {}\r\n","module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">Login</h1>\\r\\n<p class=\\\"sub-title\\\">Log in to the admin dashboard.</p>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<form (ngSubmit)=\\\"login()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">Email address:</label>\\r\\n    <input nbInput fullWidth [(ngModel)]=\\\"user.email\\\" #email=\\\"ngModel\\\" name=\\\"email\\\" id=\\\"input-email\\\" pattern=\\\".+@.+\\\\..+\\\"\\r\\n      placeholder=\\\"Email address\\\" autofocus [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n      [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\r\\n      [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.required\\\">\\r\\n        Email is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.pattern\\\">\\r\\n        Email should be the real one!\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-password\\\">Password:</label>\\r\\n    <input nbInput fullWidth [(ngModel)]=\\\"user.password\\\" #password=\\\"ngModel\\\" name=\\\"password\\\" type=\\\"password\\\"\\r\\n      id=\\\"input-password\\\" placeholder=\\\"Password\\\"\\r\\n      [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n      [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\r\\n      [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\r\\n      [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\r\\n      [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"password.invalid && password.touched \\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.required\\\">\\r\\n        Password is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\r\\n        Password should contains\\r\\n        from {{ getConfigValue('forms.validation.password.minLength') }}\\r\\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\\r\\n        characters\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group accept-group\\\">\\r\\n    <nb-checkbox name=\\\"rememberMe\\\" [(ngModel)]=\\\"user.rememberMe\\\" *ngIf=\\\"rememberMe\\\">Remember me</nb-checkbox>\\r\\n  </div>\\r\\n\\r\\n  <button nbButton fullWidth status=\\\"success\\\" [disabled]=\\\"submitted || !form.valid\\\" [class.btn-pulse]=\\\"submitted\\\">\\r\\n    Log In\\r\\n  </button>\\r\\n</form>\\r\\n\"","import { Component } from \"@angular/core\";\r\nimport { NbLoginComponent } from \"@nebular/auth\";\r\n\r\n@Component({\r\n  selector: \"ngx-login\",\r\n  templateUrl: \"./login.component.html\"\r\n})\r\nexport class NgxLoginComponent extends NbLoginComponent {}\r\n"],"sourceRoot":""}